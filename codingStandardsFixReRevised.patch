diff --git a/captcha.inc b/captcha.inc
index a625e26..3b654b4 100755
--- a/captcha.inc
+++ b/captcha.inc
@@ -8,6 +8,7 @@
 use Drupal\captcha\Entity\CaptchaPoint;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Render\Element;
+use Drupal\captcha\Constants\CaptchaConstants;
 
 /**
  * Helper function for adding/updating a CAPTCHA point.
@@ -76,7 +77,7 @@ function captcha_get_form_id_setting($form_id, $symbolic = FALSE) {
  * @return string
  *   The session ID of the new CAPTCHA session.
  */
-function _captcha_generate_captcha_session($form_id = NULL, $status = CAPTCHA_STATUS_UNSOLVED) {
+function _captcha_generate_captcha_session($form_id = NULL, $status = CaptchaConstants::CAPTCHA_STATUS_UNSOLVED) {
   $user = \Drupal::currentUser();
 
   // Initialize solution with random data.
@@ -129,7 +130,7 @@ function _captcha_required_for_user($captcha_sid, $form_id) {
     ->get('persistence');
 
   // First check: should we always add a CAPTCHA?
-  if ($captcha_persistence == CAPTCHA_PERSISTENCE_SHOW_ALWAYS) {
+  if ($captcha_persistence == CaptchaConstants::CAPTCHA_PERSISTENCE_SHOW_ALWAYS) {
     return TRUE;
   }
 
@@ -143,22 +144,22 @@ function _captcha_required_for_user($captcha_sid, $form_id) {
 
   // Second check: if the current session is already
   // solved: omit further CAPTCHAs.
-  if ($captcha_session_status == CAPTCHA_STATUS_SOLVED) {
+  if ($captcha_session_status == CaptchaConstants::CAPTCHA_STATUS_SOLVED) {
     return FALSE;
   }
 
   // Third check: look at the persistence level
   // (per form instance, per form or per user).
-  if ($captcha_persistence == CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE) {
+  if ($captcha_persistence == CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE) {
     return TRUE;
   }
   else {
     $captcha_success_form_ids = isset($_SESSION['captcha_success_form_ids']) ? (array) ($_SESSION['captcha_success_form_ids']) : [];
     switch ($captcha_persistence) {
-      case CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL:
+      case CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL:
         return (count($captcha_success_form_ids) == 0);
 
-      case CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE:
+      case CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE:
         return !isset($captcha_success_form_ids[$form_id]);
     }
   }
diff --git a/captcha.install b/captcha.install
index 0a9b263..65130f4 100755
--- a/captcha.install
+++ b/captcha.install
@@ -121,7 +121,7 @@ function captcha_install() {
 
     $captcha_storage = \Drupal::entityTypeManager()
       ->getStorage('captcha_point');
-    foreach ($form_ids as $index=>$form_id) {
+    foreach ($form_ids as $index => $form_id) {
       $values = [
         'label' => $label[$index],
         'formId' => $form_id,
@@ -148,21 +148,21 @@ function captcha_update_8901(&$sandbox) {
 }
 
 /**
-* Implements hook_update_N().
-*/
+ * Implements hook_update_N().
+ */
 function captcha_update_8902(&$sandbox) {
   $query = \Drupal::entityQuery('captcha_point');
   $query->notExists('label');
   $entity_ids = $query->execute();
 
-if (!empty($entity_ids) && is_array($entity_ids)) {
-  foreach($entity_ids as $entity_id) {
-    $captcha_point_id = $entity_id;
-    $captcha_point = \Drupal::entityTypeManager()
-      ->getStorage('captcha_point')
-      ->load($captcha_point_id);
-    $captcha_point->set('label', $captcha_point->getFormId());
-    $captcha_point->save();
-   }
+  if (!empty($entity_ids) && is_array($entity_ids)) {
+    foreach ($entity_ids as $entity_id) {
+      $captcha_point_id = $entity_id;
+      $captcha_point = \Drupal::entityTypeManager()
+        ->getStorage('captcha_point')
+        ->load($captcha_point_id);
+      $captcha_point->set('label', $captcha_point->getFormId());
+      $captcha_point->save();
+    }
   }
 }
diff --git a/captcha.module b/captcha.module
index 7278a9e..26aa0b3 100755
--- a/captcha.module
+++ b/captcha.module
@@ -20,38 +20,7 @@ use Drupal\Core\Render\Markup;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Site\Settings;
-
-/**
- * Constants for CAPTCHA persistence.
- *
- * @todo change these integers to strings because the CAPTCHA settings
- * form saves them as strings in the variables table anyway?
- */
-
-// @todo move all constants to some class.
-// Always add a CAPTCHA (even on every page of a multipage workflow).
-define('CAPTCHA_PERSISTENCE_SHOW_ALWAYS', 0);
-// Only one CAPTCHA has to be solved per form instance/multi-step workflow.
-define('CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE', 1);
-// Once the user answered correctly for a CAPTCHA on a certain form type,
-// no more CAPTCHAs will be offered anymore for that form.
-define('CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE', 2);
-// Once the user answered correctly for a CAPTCHA on the site,
-// no more CAPTCHAs will be offered anymore.
-define('CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL', 3);
-
-define('CAPTCHA_STATUS_UNSOLVED', 0);
-define('CAPTCHA_STATUS_SOLVED', 1);
-define('CAPTCHA_STATUS_EXAMPLE', 2);
-
-define('CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE', 0);
-define('CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE', 1);
-
-define('CAPTCHA_WHITELIST_IP_ADDRESS', 'addresses');
-define('CAPTCHA_WHITELIST_IP_RANGE', 'ranges');
-
-// Default captcha field access.
-define('CAPTCHA_FIELD_DEFAULT_ACCESS', 1);
+use Drupal\captcha\Constants\CaptchaConstants;
 
 /**
  * Implements hook_help().
@@ -569,8 +538,8 @@ function captcha_validate($element, FormStateInterface &$form_state) {
 
         if (in_array($captcha_persistence,
           [
-            CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL,
-            CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE,
+            CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL,
+            CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE,
           ])) {
           // Only save the success in $_SESSION if it is actually needed for
           // further validation in _captcha_required_for_user(). Setting
@@ -581,7 +550,7 @@ function captcha_validate($element, FormStateInterface &$form_state) {
         // Record success.
         \Drupal::database()->update('captcha_sessions')
           ->condition('csid', $csid)
-          ->fields(['status' => CAPTCHA_STATUS_SOLVED])
+          ->fields(['status' => CaptchaConstants::CAPTCHA_STATUS_SOLVED])
           ->expression('attempts', 'attempts + 1')
           ->execute();
       }
@@ -719,8 +688,8 @@ function captcha_captcha($op, $captcha_type = '') {
  */
 function captcha_whitelist_ips_parse_values($whitelist_ips_value) {
   $whitelist_ips = [
-    CAPTCHA_WHITELIST_IP_RANGE => [],
-    CAPTCHA_WHITELIST_IP_ADDRESS => [],
+    CaptchaConstants::CAPTCHA_WHITELIST_IP_RANGE => [],
+    CaptchaConstants::CAPTCHA_WHITELIST_IP_ADDRESS => [],
   ];
 
   // Ensure the IPs value is trimmed before moving onward.
@@ -734,10 +703,10 @@ function captcha_whitelist_ips_parse_values($whitelist_ips_value) {
   foreach ($value_rows as $value_row) {
     $value_row = trim($value_row);
     if (strpos($value_row, '-') !== FALSE) {
-      $whitelist_ips[CAPTCHA_WHITELIST_IP_RANGE][] = $value_row;
+      $whitelist_ips[CaptchaConstants::CAPTCHA_WHITELIST_IP_RANGE][] = $value_row;
     }
     else {
-      $whitelist_ips[CAPTCHA_WHITELIST_IP_ADDRESS][] = $value_row;
+      $whitelist_ips[CaptchaConstants::CAPTCHA_WHITELIST_IP_ADDRESS][] = $value_row;
     }
   }
 
@@ -756,27 +725,27 @@ function captcha_whitelist_ips_parse_values($whitelist_ips_value) {
  */
 function captcha_whitelist_ip_whitelisted($ip_address = '') {
   if (empty($ip_address)) {
-   $ip_address = Drupal::request()->getClientIp();
+    $ip_address = Drupal::request()->getClientIp();
   }
 
   $config = \Drupal::config('captcha.settings');
   $whitelist_ips_value = $config->get('whitelist_ips');
   $whitelist_ips = captcha_whitelist_ips_parse_values($whitelist_ips_value);
 
-  if (in_array($ip_address, $whitelist_ips[CAPTCHA_WHITELIST_IP_ADDRESS])) {
+  if (in_array($ip_address, $whitelist_ips[CaptchaConstants::CAPTCHA_WHITELIST_IP_ADDRESS])) {
     return TRUE;
   }
-  elseif (empty($whitelist_ips[CAPTCHA_WHITELIST_IP_RANGE])) {
+  elseif (empty($whitelist_ips[CaptchaConstants::CAPTCHA_WHITELIST_IP_RANGE])) {
     return FALSE;
   }
 
-  foreach ($whitelist_ips[CAPTCHA_WHITELIST_IP_RANGE] as $ip_range) {
-    list($ip_lower, $ip_upper) = explode('-', $ip_range, 2);
+  foreach ($whitelist_ips[CaptchaConstants::CAPTCHA_WHITELIST_IP_RANGE] as $ip_range) {
+    [$ip_lower, $ip_upper] = explode('-', $ip_range, 2);
     $ip_lower_dec = (float) sprintf("%u", ip2long($ip_lower));
     $ip_upper_dec = (float) sprintf("%u", ip2long($ip_upper));
     $ip_address_dec = (float) sprintf("%u", ip2long($ip_address));
     if (($ip_address_dec >= $ip_lower_dec) && ($ip_address_dec <= $ip_upper_dec)) {
-       return TRUE;
+      return TRUE;
     }
   }
 
diff --git a/migrations/d7_captcha_points.yml b/migrations/d7_captcha_points.yml
index 74d1cff..d913175 100644
--- a/migrations/d7_captcha_points.yml
+++ b/migrations/d7_captcha_points.yml
@@ -15,4 +15,4 @@ process:
     plugin: default_value
     default_value: TRUE
 destination:
-  plugin: entity:captcha_point
\ No newline at end of file
+  plugin: entity:captcha_point
diff --git a/image_captcha/config/install/image_captcha.settings.yml b/modules/image_captcha/config/install/image_captcha.settings.yml
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/config/install/image_captcha.settings.yml
rename to modules/image_captcha/config/install/image_captcha.settings.yml
diff --git a/image_captcha/config/schema/image_captcha.settings.yml b/modules/image_captcha/config/schema/image_captcha.settings.yml
similarity index 100%
rename from image_captcha/config/schema/image_captcha.settings.yml
rename to modules/image_captcha/config/schema/image_captcha.settings.yml
diff --git a/image_captcha/fonts/README.txt b/modules/image_captcha/fonts/README.txt
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/fonts/README.txt
rename to modules/image_captcha/fonts/README.txt
diff --git a/image_captcha/fonts/Tesox/tesox.ttf b/modules/image_captcha/fonts/Tesox/tesox.ttf
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/fonts/Tesox/tesox.ttf
rename to modules/image_captcha/fonts/Tesox/tesox.ttf
diff --git a/image_captcha/fonts/Tesox/tesox_readme.txt b/modules/image_captcha/fonts/Tesox/tesox_readme.txt
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/fonts/Tesox/tesox_readme.txt
rename to modules/image_captcha/fonts/Tesox/tesox_readme.txt
diff --git a/image_captcha/fonts/Tuffy/README.txt b/modules/image_captcha/fonts/Tuffy/README.txt
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/fonts/Tuffy/README.txt
rename to modules/image_captcha/fonts/Tuffy/README.txt
diff --git a/image_captcha/fonts/Tuffy/Tuffy.ttf b/modules/image_captcha/fonts/Tuffy/Tuffy.ttf
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/fonts/Tuffy/Tuffy.ttf
rename to modules/image_captcha/fonts/Tuffy/Tuffy.ttf
diff --git a/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf b/modules/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/fonts/Tuffy/Tuffy_Bold.ttf
rename to modules/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf
diff --git a/image_captcha/image_captcha.admin.inc b/modules/image_captcha/image_captcha.admin.inc
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/image_captcha.admin.inc
rename to modules/image_captcha/image_captcha.admin.inc
diff --git a/image_captcha/image_captcha.css b/modules/image_captcha/image_captcha.css
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/image_captcha.css
rename to modules/image_captcha/image_captcha.css
diff --git a/image_captcha/image_captcha.info.yml b/modules/image_captcha/image_captcha.info.yml
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/image_captcha.info.yml
rename to modules/image_captcha/image_captcha.info.yml
diff --git a/image_captcha/image_captcha.install b/modules/image_captcha/image_captcha.install
old mode 100755
new mode 100644
similarity index 92%
rename from image_captcha/image_captcha.install
rename to modules/image_captcha/image_captcha.install
index 58cd185..df914a5
--- a/image_captcha/image_captcha.install
+++ b/modules/image_captcha/image_captcha.install
@@ -5,6 +5,8 @@
  * Installation/uninstallation related functions for the image_captcha module.
  */
 
+use Drupal\image_captcha\Constants\ImageCaptchaConstants;
+
 /**
  * Implements hook_requirements().
  */
@@ -15,7 +17,7 @@ function image_captcha_requirements($phase) {
     // Using 'module_load_include' returns FALSE so 'include_once' used instead.
     include_once __DIR__ . '/image_captcha.module';
     // Check if the GD library is available and raise an error when not.
-    if (_image_captcha_check_setup(FALSE) & IMAGE_CAPTCHA_ERROR_NO_GDLIB) {
+    if (_image_captcha_check_setup(FALSE) & ImageCaptchaConstants::IMAGE_CAPTCHA_ERROR_NO_GDLIB) {
       $requirements['image_captcha_requires_gd'] = [
         'title' => \Drupal::translation()
           ->translate('Image CAPTCHA requires GD library'),
diff --git a/image_captcha/image_captcha.js b/modules/image_captcha/image_captcha.js
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/image_captcha.js
rename to modules/image_captcha/image_captcha.js
diff --git a/image_captcha/image_captcha.libraries.yml b/modules/image_captcha/image_captcha.libraries.yml
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/image_captcha.libraries.yml
rename to modules/image_captcha/image_captcha.libraries.yml
diff --git a/image_captcha/image_captcha.links.menu.yml b/modules/image_captcha/image_captcha.links.menu.yml
similarity index 100%
rename from image_captcha/image_captcha.links.menu.yml
rename to modules/image_captcha/image_captcha.links.menu.yml
diff --git a/image_captcha/image_captcha.links.task.yml b/modules/image_captcha/image_captcha.links.task.yml
similarity index 100%
rename from image_captcha/image_captcha.links.task.yml
rename to modules/image_captcha/image_captcha.links.task.yml
diff --git a/image_captcha/image_captcha.module b/modules/image_captcha/image_captcha.module
old mode 100755
new mode 100644
similarity index 91%
rename from image_captcha/image_captcha.module
rename to modules/image_captcha/image_captcha.module
index 1a6d949..2cedd42
--- a/image_captcha/image_captcha.module
+++ b/modules/image_captcha/image_captcha.module
@@ -9,17 +9,8 @@ use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Link;
 use Drupal\Core\DrupalKernel;
-
-define('IMAGE_CAPTCHA_ALLOWED_CHARACTERS', 'aAbBCdEeFfGHhijKLMmNPQRrSTtWXYZ23456789');
-
-// Setup status flags.
-define('IMAGE_CAPTCHA_ERROR_NO_GDLIB', 1);
-define('IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT', 2);
-define('IMAGE_CAPTCHA_ERROR_TTF_FILE_READ_PROBLEM', 4);
-
-define('IMAGE_CAPTCHA_FILE_FORMAT_JPG', 1);
-define('IMAGE_CAPTCHA_FILE_FORMAT_PNG', 2);
-define('IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG', 3);
+use Drupal\image_captcha\Constants\ImageCaptchaConstants;
+use Drupal\captcha\Constants\CaptchaConstants;
 
 /**
  * Implements hook_help().
@@ -39,7 +30,7 @@ function image_captcha_help($route_name, RouteMatchInterface $route_match) {
  *   List of font paths.
  */
 function _image_captcha_get_enabled_fonts() {
-  if (IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT & _image_captcha_check_setup(FALSE)) {
+  if (ImageCaptchaConstants::IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT & _image_captcha_check_setup(FALSE)) {
     return ['BUILTIN'];
   }
   else {
@@ -199,11 +190,11 @@ function _image_captcha_check_setup($check_fonts = TRUE) {
   // We need at least the imagepng function.
   // Note that the imagejpg function is optionally also used, but not required.
   if (!function_exists('imagepng')) {
-    $status = $status | IMAGE_CAPTCHA_ERROR_NO_GDLIB;
+    $status = $status | ImageCaptchaConstants::IMAGE_CAPTCHA_ERROR_NO_GDLIB;
   }
 
   if (!function_exists('imagettftext')) {
-    $status = $status | IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT;
+    $status = $status | ImageCaptchaConstants::IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT;
   }
 
   if ($check_fonts) {
@@ -217,14 +208,13 @@ function _image_captcha_check_setup($check_fonts = TRUE) {
       // Try again now.
       $fonts = _image_captcha_get_enabled_fonts();
       if (empty($fonts)) {
-        $status = $status | IMAGE_CAPTCHA_ERROR_TTF_FILE_READ_PROBLEM;
+        $status = $status | ImageCaptchaConstants::IMAGE_CAPTCHA_ERROR_TTF_FILE_READ_PROBLEM;
       }
     }
     if (!empty($fonts)) {
-      $readable_fonts = [];
-      [$readable_fonts, $problem_fonts] = _image_captcha_check_fonts($fonts);
+      $problem_fonts = _image_captcha_check_fonts($fonts);
       if (count($problem_fonts) != 0) {
-        $status = $status | IMAGE_CAPTCHA_ERROR_TTF_FILE_READ_PROBLEM;
+        $status = $status | ImageCaptchaConstants::IMAGE_CAPTCHA_ERROR_TTF_FILE_READ_PROBLEM;
       }
     }
   }
@@ -267,7 +257,7 @@ function image_captcha_captcha($op, $captcha_type = '', $captcha_sid = NULL) {
     case 'list':
       // Only offer the image CAPTCHA if it is possible to generate an image
       // on this setup.
-      if (!(_image_captcha_check_setup() & IMAGE_CAPTCHA_ERROR_NO_GDLIB)) {
+      if (!(_image_captcha_check_setup() & ImageCaptchaConstants::IMAGE_CAPTCHA_ERROR_NO_GDLIB)) {
         return ['Image'];
       }
       else {
@@ -331,11 +321,11 @@ function image_captcha_captcha($op, $captcha_type = '', $captcha_sid = NULL) {
         // ignoring spaces.
         switch (\Drupal::config('captcha.settings')
           ->get('default_validation')) {
-          case CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE:
+          case CaptchaConstants::CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE:
             $result['captcha_validate'] = 'captcha_validate_ignore_spaces';
             break;
 
-          case CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE:
+          case CaptchaConstants::CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE:
             $result['captcha_validate'] = 'captcha_validate_case_insensitive_ignore_spaces';
             break;
         }
diff --git a/image_captcha/image_captcha.routing.yml b/modules/image_captcha/image_captcha.routing.yml
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/image_captcha.routing.yml
rename to modules/image_captcha/image_captcha.routing.yml
diff --git a/image_captcha/image_captcha_refresh.css b/modules/image_captcha/image_captcha_refresh.css
similarity index 100%
rename from image_captcha/image_captcha_refresh.css
rename to modules/image_captcha/image_captcha_refresh.css
diff --git a/image_captcha/js/image_captcha_refresh.js b/modules/image_captcha/js/image_captcha_refresh.js
similarity index 100%
rename from image_captcha/js/image_captcha_refresh.js
rename to modules/image_captcha/js/image_captcha_refresh.js
diff --git a/modules/image_captcha/src/Constants/ImageCaptchaConstants.php b/modules/image_captcha/src/Constants/ImageCaptchaConstants.php
new file mode 100644
index 0000000..635415c
--- /dev/null
+++ b/modules/image_captcha/src/Constants/ImageCaptchaConstants.php
@@ -0,0 +1,21 @@
+<?php
+
+namespace Drupal\image_captcha\Constants;
+
+/**
+ * Constants for the image_captcha module.
+ */
+class ImageCaptchaConstants {
+
+  const IMAGE_CAPTCHA_ALLOWED_CHARACTERS = 'aAbBCdEeFfGHhijKLMmNPQRrSTtWXYZ23456789';
+
+  // Setup status flags.
+  const IMAGE_CAPTCHA_ERROR_NO_GDLIB = 1;
+  const IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT = 2;
+  const IMAGE_CAPTCHA_ERROR_TTF_FILE_READ_PROBLEM = 4;
+
+  const IMAGE_CAPTCHA_FILE_FORMAT_JPG = 1;
+  const IMAGE_CAPTCHA_FILE_FORMAT_PNG = 2;
+  const IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG = 3;
+
+}
diff --git a/image_captcha/src/Controller/CaptchaFontPreviewController.php b/modules/image_captcha/src/Controller/CaptchaFontPreviewController.php
similarity index 100%
rename from image_captcha/src/Controller/CaptchaFontPreviewController.php
rename to modules/image_captcha/src/Controller/CaptchaFontPreviewController.php
diff --git a/image_captcha/src/Controller/CaptchaImageGeneratorController.php b/modules/image_captcha/src/Controller/CaptchaImageGeneratorController.php
similarity index 100%
rename from image_captcha/src/Controller/CaptchaImageGeneratorController.php
rename to modules/image_captcha/src/Controller/CaptchaImageGeneratorController.php
diff --git a/image_captcha/src/Controller/CaptchaImageRefresh.php b/modules/image_captcha/src/Controller/CaptchaImageRefresh.php
similarity index 91%
rename from image_captcha/src/Controller/CaptchaImageRefresh.php
rename to modules/image_captcha/src/Controller/CaptchaImageRefresh.php
index 9351034..396274c 100644
--- a/image_captcha/src/Controller/CaptchaImageRefresh.php
+++ b/modules/image_captcha/src/Controller/CaptchaImageRefresh.php
@@ -13,6 +13,7 @@ use Drupal\Core\Url;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Drupal\Component\Utility\Crypt;
+use Drupal\image_captcha\Constants\ImageCaptchaConstants;
 
 /**
  * Description of CaptchaImageRefresh.
@@ -54,11 +55,11 @@ class CaptchaImageRefresh extends ControllerBase {
       'message' => '',
     ];
     try {
-      \Drupal::moduleHandler()->loadInclude('captcha', 'inc', 'captcha');
+      $this->moduleHandler->loadInclude('captcha', 'inc', 'captcha');
       $config = $this->config('image_captcha.settings');
       $captcha_sid = _captcha_generate_captcha_session($form_id);
       $captcha_token = Crypt::randomBytesBase64();
-      $allowed_char = $config->get('image_captcha_image_allowed_chars') ? $config->get('image_captcha_image_allowed_chars') : IMAGE_CAPTCHA_ALLOWED_CHARACTERS;
+      $allowed_char = $config->get('image_captcha_image_allowed_chars') ? $config->get('image_captcha_image_allowed_chars') : ImageCaptchaConstants::IMAGE_CAPTCHA_ALLOWED_CHARACTERS;
       $allowed_chars = _image_captcha_utf8_split($allowed_char);
       $code_length = (int) $config->get('image_captcha_code_length');
       $code = '';
diff --git a/image_captcha/src/Form/ImageCaptchaSettingsForm.php b/modules/image_captcha/src/Form/ImageCaptchaSettingsForm.php
old mode 100755
new mode 100644
similarity index 96%
rename from image_captcha/src/Form/ImageCaptchaSettingsForm.php
rename to modules/image_captcha/src/Form/ImageCaptchaSettingsForm.php
index 74be099..8ab1b43
--- a/image_captcha/src/Form/ImageCaptchaSettingsForm.php
+++ b/modules/image_captcha/src/Form/ImageCaptchaSettingsForm.php
@@ -12,6 +12,7 @@ use Drupal\Core\Template\Attribute;
 use Drupal\Core\Url;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\File\FileSystemInterface;
+use Drupal\image_captcha\Constants\ImageCaptchaConstants;
 
 /**
  * Displays the pants settings form.
@@ -83,7 +84,7 @@ class ImageCaptchaSettingsForm extends ConfigFormBase {
 
     // First some error checking.
     $setup_status = _image_captcha_check_setup(FALSE);
-    if ($setup_status & IMAGE_CAPTCHA_ERROR_NO_GDLIB) {
+    if ($setup_status & ImageCaptchaConstants::IMAGE_CAPTCHA_ERROR_NO_GDLIB) {
       $this->messenger()->addError($this->t(
         'The Image CAPTCHA module can not generate images because your PHP setup does not support it (no <a href="!gdlib" target="_blank">GD library</a> with JPEG support).',
         ['!gdlib' => 'http://php.net/manual/en/book.image.php']
@@ -113,7 +114,7 @@ class ImageCaptchaSettingsForm extends ConfigFormBase {
     $form['image_captcha_code_settings']['image_captcha_image_allowed_chars'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Characters to use in the code'),
-      '#default_value' => $config->get('image_captcha_image_allowed_chars') ? $config->get('image_captcha_image_allowed_chars') : IMAGE_CAPTCHA_ALLOWED_CHARACTERS,
+      '#default_value' => $config->get('image_captcha_image_allowed_chars') ? $config->get('image_captcha_image_allowed_chars') : ImageCaptchaConstants::IMAGE_CAPTCHA_ALLOWED_CHARACTERS,
     ];
     $form['image_captcha_code_settings']['image_captcha_code_length'] = [
       '#type' => 'select',
@@ -178,9 +179,9 @@ class ImageCaptchaSettingsForm extends ConfigFormBase {
       '#description' => $this->t('Select the file format for the image. JPEG usually results in smaller files, PNG allows tranparency.'),
       '#default_value' => $config->get('image_captcha_file_format'),
       '#options' => [
-        IMAGE_CAPTCHA_FILE_FORMAT_JPG => $this->t('JPEG'),
-        IMAGE_CAPTCHA_FILE_FORMAT_PNG => $this->t('PNG'),
-        IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG => $this->t('PNG with transparent background'),
+        ImageCaptchaConstants::IMAGE_CAPTCHA_FILE_FORMAT_JPG => $this->t('JPEG'),
+        ImageCaptchaConstants::IMAGE_CAPTCHA_FILE_FORMAT_PNG => $this->t('PNG'),
+        ImageCaptchaConstants::IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG => $this->t('PNG with transparent background'),
       ],
     ];
 
@@ -272,13 +273,11 @@ class ImageCaptchaSettingsForm extends ConfigFormBase {
           $form_state->setErrorByName('image_captcha_image_allowed_chars', $this->t('The built-in font only supports Latin2 characters. Only use "a" to "z" and numbers.'));
         }
       }
-
-      $readable_fonts = [];
       $available_fonts = _image_captcha_get_font_uri();
       foreach ($fonts as $token) {
         $fonts[$token] = $available_fonts[$token];
       }
-      [$readable_fonts, $problem_fonts] = _image_captcha_check_fonts($fonts);
+      $problem_fonts = _image_captcha_check_fonts($fonts);
       if (count($problem_fonts) > 0) {
         $form_state->setErrorByName('image_captcha_fonts', $this->t('The following fonts are not readable: %fonts.', ['%fonts' => implode(', ', $problem_fonts)]));
       }
@@ -302,7 +301,6 @@ class ImageCaptchaSettingsForm extends ConfigFormBase {
     $imageSettings = $form_state->cleanValues()->getValues();
     if (!isset($form['image_captcha_font_settings']['no_ttf_support'])) {
       // Filter the image_captcha fonts array to pick out the selected ones.
-      $image_captcha_fonts = $form_state->getValue('image_captcha_fonts');
       $imageSettings['image_captcha_fonts'] = array_filter($imageSettings['image_captcha_fonts']);
     }
     $config = $this->config('image_captcha.settings');
@@ -338,7 +336,7 @@ class ImageCaptchaSettingsForm extends ConfigFormBase {
 
     // First check if there is TrueType support.
     $setup_status = _image_captcha_check_setup(FALSE);
-    if ($setup_status & IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT) {
+    if ($setup_status & ImageCaptchaConstants::IMAGE_CAPTCHA_ERROR_NO_TTF_SUPPORT) {
       // Show a warning that there is no TrueType support.
       $form['no_ttf_support'] = [
         '#type' => 'item',
diff --git a/image_captcha/src/Response/CaptchaImageResponse.php b/modules/image_captcha/src/Response/CaptchaImageResponse.php
old mode 100755
new mode 100644
similarity index 97%
rename from image_captcha/src/Response/CaptchaImageResponse.php
rename to modules/image_captcha/src/Response/CaptchaImageResponse.php
index a55a87d..77d5c20
--- a/image_captcha/src/Response/CaptchaImageResponse.php
+++ b/modules/image_captcha/src/Response/CaptchaImageResponse.php
@@ -8,6 +8,7 @@ use Drupal\Core\File\FileSystemInterface;
 use Psr\Log\LoggerInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
+use Drupal\image_captcha\Constants\ImageCaptchaConstants;
 
 /**
  * Response which is returned as the captcha for image_captcha.
@@ -93,7 +94,7 @@ class CaptchaImageResponse extends Response {
    * {@inheritdoc}
    */
   public function sendHeaders() {
-    if ($this->config->get('image_captcha_file_format') == IMAGE_CAPTCHA_FILE_FORMAT_JPG) {
+    if ($this->config->get('image_captcha_file_format') == ImageCaptchaConstants::IMAGE_CAPTCHA_FILE_FORMAT_JPG) {
       $this->headers->set('content-type', 'image/jpeg');
     }
     else {
@@ -116,7 +117,7 @@ class CaptchaImageResponse extends Response {
     ob_start();
 
     $file_format = $this->config->get('image_captcha_file_format');
-    if ($file_format == IMAGE_CAPTCHA_FILE_FORMAT_JPG) {
+    if ($file_format == ImageCaptchaConstants::IMAGE_CAPTCHA_FILE_FORMAT_JPG) {
       imagejpeg($this->image);
     }
     else {
@@ -172,7 +173,7 @@ class CaptchaImageResponse extends Response {
     $background_color = imagecolorallocate($image, $background_rgb[0], $background_rgb[1], $background_rgb[2]);
     // Set transparency if needed.
     $file_format = $this->config->get('image_captcha_file_format');
-    if ($file_format == IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG) {
+    if ($file_format == ImageCaptchaConstants::IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG) {
       imagecolortransparent($image, $background_color);
     }
     imagefilledrectangle($image, 0, 0, $width, $height, $background_color);
@@ -210,7 +211,7 @@ class CaptchaImageResponse extends Response {
 
       $distorted_image = imagecreatetruecolor($width, $height);
 
-      if ($file_format == IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG) {
+      if ($file_format == ImageCaptchaConstants::IMAGE_CAPTCHA_FILE_FORMAT_TRANSPARENT_PNG) {
         imagecolortransparent($distorted_image, $background_color);
       }
 
diff --git a/image_captcha/src/StreamedResponse/CaptchaFontPreviewStreamedResponse.php b/modules/image_captcha/src/StreamedResponse/CaptchaFontPreviewStreamedResponse.php
old mode 100755
new mode 100644
similarity index 100%
rename from image_captcha/src/StreamedResponse/CaptchaFontPreviewStreamedResponse.php
rename to modules/image_captcha/src/StreamedResponse/CaptchaFontPreviewStreamedResponse.php
diff --git a/image_captcha/templates/image-captcha-refresh.html.twig b/modules/image_captcha/templates/image-captcha-refresh.html.twig
similarity index 100%
rename from image_captcha/templates/image-captcha-refresh.html.twig
rename to modules/image_captcha/templates/image-captcha-refresh.html.twig
diff --git a/src/Constants/CaptchaConstants.php b/src/Constants/CaptchaConstants.php
new file mode 100644
index 0000000..4e32f95
--- /dev/null
+++ b/src/Constants/CaptchaConstants.php
@@ -0,0 +1,33 @@
+<?php
+
+namespace Drupal\captcha\Constants;
+
+/**
+ * Constants for the captcha module.
+ */
+class CaptchaConstants {
+  // Always add a CAPTCHA (even on every page of a multipage workflow).
+  const CAPTCHA_PERSISTENCE_SHOW_ALWAYS = 0;
+  // Only one CAPTCHA has to be solved per form instance/multi-step workflow.
+  const CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE = 1;
+  // Once the user answered correctly for a CAPTCHA on a certain form type,
+  // no more CAPTCHAs will be offered anymore for that form.
+  const CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE = 2;
+  // Once the user answered correctly for a CAPTCHA on the site,
+  // no more CAPTCHAs will be offered anymore.
+  const CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL = 3;
+
+  const CAPTCHA_STATUS_UNSOLVED = 0;
+  const CAPTCHA_STATUS_SOLVED = 1;
+  const CAPTCHA_STATUS_EXAMPLE = 2;
+
+  const CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE = 0;
+  const CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE = 1;
+
+  const CAPTCHA_WHITELIST_IP_ADDRESS = 'addresses';
+  const CAPTCHA_WHITELIST_IP_RANGE = 'ranges';
+
+  // Default captcha field access.
+  const CAPTCHA_FIELD_DEFAULT_ACCESS = 1;
+
+}
diff --git a/src/Element/Captcha.php b/src/Element/Captcha.php
index bf8a469..fcb6f69 100644
--- a/src/Element/Captcha.php
+++ b/src/Element/Captcha.php
@@ -8,6 +8,7 @@ use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\Element\FormElement;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Utility\Crypt;
+use Drupal\captcha\Constants\CaptchaConstants;
 
 /**
  * Defines the CAPTCHA form element with default properties.
@@ -72,7 +73,7 @@ class Captcha extends FormElement implements ContainerFactoryPluginInterface {
     // Override the default CAPTCHA validation function for case
     // insensitive validation.
     // @todo shouldn't this be done somewhere else, e.g. in form_alter?
-    if (CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE == $this->configFactory->get('captcha.settings')
+    if (CaptchaConstants::CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE == $this->configFactory->get('captcha.settings')
       ->get('default_validation')
     ) {
       $captcha_element['#captcha_validate'] = 'captcha_validate_case_insensitive_equality';
@@ -114,7 +115,7 @@ class Captcha extends FormElement implements ContainerFactoryPluginInterface {
     else {
       // Generate a new CAPTCHA session if we could
       // not reuse one from a posted form.
-      $captcha_sid = _captcha_generate_captcha_session($this_form_id, CAPTCHA_STATUS_UNSOLVED);
+      $captcha_sid = _captcha_generate_captcha_session($this_form_id, CaptchaConstants::CAPTCHA_STATUS_UNSOLVED);
       $captcha_token = Crypt::randomBytesBase64();
       \Drupal::database()->update('captcha_sessions')
         ->fields(['token' => $captcha_token])
@@ -163,7 +164,7 @@ class Captcha extends FormElement implements ContainerFactoryPluginInterface {
       'captcha_sid' => $captcha_sid,
       'module' => $captcha_type_module,
       'captcha_type' => $captcha_type_challenge,
-      'access' => $element['#access'] ?? CAPTCHA_FIELD_DEFAULT_ACCESS,
+      'access' => $element['#access'] ?? CaptchaConstants::CAPTCHA_FIELD_DEFAULT_ACCESS,
     ]);
     $element['#captcha_info'] = [
       'form_id' => $this_form_id,
diff --git a/src/Form/CaptchaExamplesForm.php b/src/Form/CaptchaExamplesForm.php
index b6e990d..ce85353 100755
--- a/src/Form/CaptchaExamplesForm.php
+++ b/src/Form/CaptchaExamplesForm.php
@@ -74,7 +74,7 @@ class CaptchaExamplesForm extends FormBase {
       else {
         // @phpstan-ignore-next-line
         $modules_list = $this->moduleHandler->getImplementations('captcha');
-        foreach ($modules_list as $mkey => $module) {
+        foreach ($modules_list as $module) {
           $challenges[$module] = call_user_func_array($module . '_captcha', ['list']);
         }
       }
diff --git a/src/Form/CaptchaSettingsForm.php b/src/Form/CaptchaSettingsForm.php
index 08ddfbc..22540c3 100755
--- a/src/Form/CaptchaSettingsForm.php
+++ b/src/Form/CaptchaSettingsForm.php
@@ -11,6 +11,7 @@ use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\captcha\Constants\CaptchaConstants;
 
 /**
  * Displays the captcha settings form.
@@ -99,7 +100,7 @@ class CaptchaSettingsForm extends ConfigFormBase {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $config = $this->config('captcha.settings');
-    \Drupal::moduleHandler()->loadInclude('captcha', 'inc');
+    $this->moduleHandler->loadInclude('captcha', 'inc');
 
     // Configuration of which forms to protect, with what challenge.
     $form['form_protection'] = [
@@ -208,8 +209,8 @@ class CaptchaSettingsForm extends ConfigFormBase {
       '#title' => $this->t('Default CAPTCHA validation'),
       '#description' => $this->t('Define how the response should be processed by default. Note that the modules that provide the actual challenges can override or ignore this.'),
       '#options' => [
-        CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE => $this->t('Case sensitive validation: the response has to exactly match the solution.'),
-        CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE => $this->t('Case insensitive validation: lowercase/uppercase errors are ignored.'),
+        CaptchaConstants::CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE => $this->t('Case sensitive validation: the response has to exactly match the solution.'),
+        CaptchaConstants::CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE => $this->t('Case insensitive validation: lowercase/uppercase errors are ignored.'),
       ],
       '#default_value' => $config->get('default_validation'),
     ];
@@ -221,10 +222,10 @@ class CaptchaSettingsForm extends ConfigFormBase {
       '#title' => $this->t('Persistence'),
       '#default_value' => $config->get('persistence'),
       '#options' => [
-        CAPTCHA_PERSISTENCE_SHOW_ALWAYS => $this->t('Always add a challenge.'),
-        CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE => $this->t('Omit challenges in a multi-step/preview workflow once the user successfully responds to a challenge.'),
-        CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE => $this->t('Omit challenges on a form type once the user successfully responds to a challenge on a form of that type.'),
-        CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL => $this->t('Omit challenges on all forms once the user successfully responds to any challenge on the site.'),
+        CaptchaConstants::CAPTCHA_PERSISTENCE_SHOW_ALWAYS => $this->t('Always add a challenge.'),
+        CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE => $this->t('Omit challenges in a multi-step/preview workflow once the user successfully responds to a challenge.'),
+        CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE => $this->t('Omit challenges on a form type once the user successfully responds to a challenge on a form of that type.'),
+        CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL => $this->t('Omit challenges on all forms once the user successfully responds to any challenge on the site.'),
       ],
       '#description' => $this->t('Define if challenges should be omitted during the rest of a session once the user successfully responds to a challenge.'),
     ];
@@ -274,22 +275,28 @@ class CaptchaSettingsForm extends ConfigFormBase {
       $whitelist_ips = captcha_whitelist_ips_parse_values($whitelist_ips_value);
 
       // Checking single ip addresses.
-      foreach ($whitelist_ips[CAPTCHA_WHITELIST_IP_ADDRESS] as $ip_address) {
+      foreach ($whitelist_ips[CaptchaConstants::CAPTCHA_WHITELIST_IP_ADDRESS] as $ip_address) {
         if (filter_var($ip_address, FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE) == FALSE) {
           $form_state->setErrorByName('whitelist_ips', $this->t('IP address %ip_address is not valid.', ['%ip_address' => $ip_address]));
         }
       }
 
       // Checking ip ranges.
-      foreach ($whitelist_ips[CAPTCHA_WHITELIST_IP_RANGE] as $ip_range) {
-        list($ip_lower, $ip_upper) = explode('-', $ip_range, 2);
+      foreach ($whitelist_ips[CaptchaConstants::CAPTCHA_WHITELIST_IP_RANGE] as $ip_range) {
+        [$ip_lower, $ip_upper] = explode('-', $ip_range, 2);
 
         if (filter_var($ip_lower, FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE) == FALSE) {
-          $form_state->setErrorByName('whitelist_ips', $this->t('Lower IP address %ip_address in range %ip_range is not valid.', ['%ip_address' => $ip_lower, '%ip_range' => $ip_range]));
+          $form_state->setErrorByName('whitelist_ips', $this->t('Lower IP address %ip_address in range %ip_range is not valid.', [
+            '%ip_address' => $ip_lower,
+            '%ip_range' => $ip_range,
+          ]));
         }
 
         if (filter_var($ip_upper, FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE) == FALSE) {
-          $form_state->setErrorByName('whitelist_ips', $this->t('Upper IP address %ip_address in range %ip_range is not valid.', ['%ip_address' => $ip_upper, '%ip_range' => $ip_range]));
+          $form_state->setErrorByName('whitelist_ips', $this->t('Upper IP address %ip_address in range %ip_range is not valid.', [
+            '%ip_address' => $ip_upper,
+            '%ip_range' => $ip_range,
+          ]));
         }
 
         $ip_lower_dec = (float) sprintf("%u", ip2long($ip_lower));
diff --git a/src/Service/CaptchaService.php b/src/Service/CaptchaService.php
index d38ae3b..47ea116 100644
--- a/src/Service/CaptchaService.php
+++ b/src/Service/CaptchaService.php
@@ -66,7 +66,7 @@ class CaptchaService {
     }
     else {
       // @phpstan-ignore-next-line
-      foreach (\Drupal::moduleHandler()->getImplementations('captcha') as $module) {
+      foreach ($this->moduleHandler->getImplementations('captcha') as $module) {
         $type = call_user_func_array($module . '_captcha', ['list']);
         if (!is_array($type)) {
           $types[$module] = [$type];
diff --git a/tests/src/Functional/CaptchaCacheTest.php b/tests/src/Functional/CaptchaCacheTest.php
index 13958e3..1f0eddd 100644
--- a/tests/src/Functional/CaptchaCacheTest.php
+++ b/tests/src/Functional/CaptchaCacheTest.php
@@ -35,7 +35,6 @@ class CaptchaCacheTest extends CaptchaWebTestBase {
    * Test the cache tags.
    */
   public function testCacheTags() {
-    global $base_path;
     // Check caching without captcha as anonymous user.
     $this->drupalGet('');
     $this->assertEquals($this->getSession()->getResponseHeader('x-drupal-cache'), 'MISS');
diff --git a/tests/src/Functional/CaptchaPersistenceTest.php b/tests/src/Functional/CaptchaPersistenceTest.php
index 7d257ef..9b4789f 100755
--- a/tests/src/Functional/CaptchaPersistenceTest.php
+++ b/tests/src/Functional/CaptchaPersistenceTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\captcha\Functional;
 
 use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\captcha\Constants\CaptchaConstants;
 
 /**
  * Tests CAPTCHA Persistence.
@@ -69,7 +70,7 @@ class CaptchaPersistenceTest extends CaptchaWebTestBase {
    */
   public function testPersistenceAlways() {
     // Set up of persistence and CAPTCHAs.
-    $this->setUpPersistence(CAPTCHA_PERSISTENCE_SHOW_ALWAYS);
+    $this->setUpPersistence(CaptchaConstants::CAPTCHA_PERSISTENCE_SHOW_ALWAYS);
 
     // Go to login form and check if there is a CAPTCHA
     // on the login form (look for the title).
@@ -104,7 +105,7 @@ class CaptchaPersistenceTest extends CaptchaWebTestBase {
    */
   public function testPersistencePerFormInstance() {
     // Set up of persistence and CAPTCHAs.
-    $this->setUpPersistence(CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE);
+    $this->setUpPersistence(CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE);
 
     // Go to login form and check if there is a CAPTCHA on the login form.
     $this->drupalGet('<front>');
@@ -141,7 +142,7 @@ class CaptchaPersistenceTest extends CaptchaWebTestBase {
    */
   public function testPersistencePerFormType() {
     // Set up of persistence and CAPTCHAs.
-    $this->setUpPersistence(CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE);
+    $this->setUpPersistence(CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_TYPE);
 
     // Go to login form and check if there is a CAPTCHA on the login form.
     $this->drupalGet('<front>');
@@ -183,7 +184,7 @@ class CaptchaPersistenceTest extends CaptchaWebTestBase {
    */
   public function testPersistenceOnlyOnce() {
     // Set up of persistence and CAPTCHAs.
-    $this->setUpPersistence(CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL);
+    $this->setUpPersistence(CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL);
 
     // Go to login form and check if there is a CAPTCHA on the login form.
     $this->drupalGet('<front>');
diff --git a/tests/src/Functional/CaptchaSessionReuseAttackTestCase.php b/tests/src/Functional/CaptchaSessionReuseAttackTestCase.php
index 8bf5416..ae2832d 100755
--- a/tests/src/Functional/CaptchaSessionReuseAttackTestCase.php
+++ b/tests/src/Functional/CaptchaSessionReuseAttackTestCase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\captcha\Functional;
 
+use Drupal\captcha\Constants\CaptchaConstants;
+
 /**
  * Tests CAPTCHA session reusing.
  *
@@ -26,7 +28,7 @@ class CaptchaSessionReuseAttackTestCase extends CaptchaWebTestBase {
     // Set Test CAPTCHA on comment form.
     captcha_set_form_id_setting(self::COMMENT_FORM_ID, 'captcha/Test');
     $this->config('captcha.settings')
-      ->set('persistence', CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE)
+      ->set('persistence', CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE)
       ->save();
 
     // Log in as normal user.
@@ -71,7 +73,7 @@ class CaptchaSessionReuseAttackTestCase extends CaptchaWebTestBase {
     // Set CAPTCHA on page form.
     captcha_set_form_id_setting('node_page_form', 'captcha/Test');
     $this->config('captcha.settings')
-      ->set('persistence', CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE)
+      ->set('persistence', CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE)
       ->save();
 
     // Log in as normal user.
@@ -119,7 +121,7 @@ class CaptchaSessionReuseAttackTestCase extends CaptchaWebTestBase {
     // Set CAPTCHA on login form.
     captcha_set_form_id_setting('user_login_form', 'captcha/Test');
     $this->config('captcha.settings')
-      ->set('persistence', CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE)
+      ->set('persistence', CaptchaConstants::CAPTCHA_PERSISTENCE_SKIP_ONCE_SUCCESSFUL_PER_FORM_INSTANCE)
       ->save();
 
     // Go to log in form.
diff --git a/tests/src/Functional/CaptchaTest.php b/tests/src/Functional/CaptchaTest.php
index d93eaf0..da602f8 100755
--- a/tests/src/Functional/CaptchaTest.php
+++ b/tests/src/Functional/CaptchaTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\captcha\Functional;
 
 use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\captcha\Constants\CaptchaConstants;
 
 /**
  * Tests CAPTCHA main test case sensitivity.
@@ -155,7 +156,7 @@ class CaptchaTest extends CaptchaWebTestBase {
     $this->drupalLogin($this->normalUser);
 
     // Test case sensitive posting.
-    $config->set('default_validation', CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE);
+    $config->set('default_validation', CaptchaConstants::CAPTCHA_DEFAULT_VALIDATION_CASE_SENSITIVE);
     $config->save();
 
     $this->assertCommentPosting('Test 123', TRUE, 'Case sensitive validation of right casing.');
@@ -163,7 +164,7 @@ class CaptchaTest extends CaptchaWebTestBase {
     $this->assertCommentPosting('TEST 123', FALSE, 'Case sensitive validation of wrong casing.');
 
     // Test case insensitive posting (the default).
-    $config->set('default_validation', CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE);
+    $config->set('default_validation', CaptchaConstants::CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE);
     $config->save();
 
     $this->assertCommentPosting('Test 123', TRUE, 'Case insensitive validation of right casing.');
diff --git a/tests/src/Unit/Controller/CaptchaPointListBuilderTest.php b/tests/src/Unit/Controller/CaptchaPointListBuilderTest.php
index 4c520a3..30234e0 100644
--- a/tests/src/Unit/Controller/CaptchaPointListBuilderTest.php
+++ b/tests/src/Unit/Controller/CaptchaPointListBuilderTest.php
@@ -20,6 +20,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class CaptchaPointListBuilderTest extends UnitTestCase {
 
   use ProphecyTrait;
+
   /**
    * Set up.
    */
